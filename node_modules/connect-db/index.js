const mongoose = require('mongoose')

const inDevMode = (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'testing') 
const defaultOptions = {
    useNewUrlParser: true,
    useCreateIndex: true,
    useFindAndModify: false,
    promiseLibrary: global.Promise,
    autoIndex: false, // Don't build indexes
    reconnectTries: 5, // Never stop trying to reconnect
    reconnectInterval: 1000 * 60, // Reconnect every 1min
    poolSize: 10, // Maintain up to 10 socket connections
    // If not connected, return errors immediately rather than waiting for reconnect
    bufferMaxEntries: 0,
    connectTimeoutMS: 10000, // Give up initial connection after 10 seconds
    socketTimeoutMS: 45000, // Close sockets after 45 seconds of inactivity
    family: 4 // Use IPv4, skip trying IPv6
}


class DatabaseConnectionService {
    /**
     * 
     * @param {String} uri mongoDB instance uri string
     * @param {Object<connectionOptions>} options mongoose connectionOptions
     * @param {function} onError 
     * @param {function} onConnected 
     * @param {function} onDisconnected 
     */
    constructor({uri, options = {}, onError = null, onConnected = null, onDisconnected = null}) {
        this._uri = uri
        this._options = { ...defaultOptions, ...options}
        this._onError = onError
        this._onConnected = onConnected
        this._onDisconnected = onDisconnected

        this._mongo = mongoose.connection
        this._mongo.on('error', this._onErrorHuddler.bind(this))
        this._mongo.on('connected', this._onConnectedHuddler.bind(this))
        this._mongo.on('disconnected', this._onDisconnectHuddler.bind(this))

         // If the Node process ends, close the Mongoose connection
        process.on('SIGINT', () => {
            mongoose.connection.close(() => {
                process.exit(0);
            });
        });
    }
    
    
    connectDB() {
        return new Promise((res, rej) => {
            mongoose.connect(this._uri, this._options)
                .then(res)
                .catch(rej)    
        }) 
    }

    _onConnectedHuddler() {
        if (this._onConnected) return this._onConnected()

        if (inDevMode) console.log('[Database_Connection_Service] - Info:\nConnection Establish.')
    }

    _onDisconnectHuddler() {
        if (this._onDisconnected) return this._onDisconnected()
        
        if (inDevMode)
            console.log('[Database_Connection_Service] - Error:\nDatabase Disconnected.')
    }

    _onErrorHuddler(error) {
        if (this._onError) return this._onError(error)

        if (inDevMode) console.log('[Database_Connection_Service] - Error:\n', error)

        throw error
    }
}


module.exports = DatabaseConnectionService
